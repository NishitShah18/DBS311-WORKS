-- ***********************
-- Name: Nishit Shah
-- ID: 130 176 217
-- Date: 14 October 2022
-- Purpose: Lab 05 DBS311
-- ***********************

SET SERVEROUTPUT ON;

-- Q1 - EVEN_ODD

CREATE OR REPLACE PROCEDURE FIND_EVEN_ODD(NUM IN NUMBER) AS

BEGIN  
    IF MOD(NUM,2)=0
    THEN
        DBMS_OUTPUT.PUT_LINE('The number '||NUM||' is even');
    ELSE
        DBMS_OUTPUT.PUT_LINE('The number '||NUM||' is odd');
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('An Error Occured!');
END FIND_EVEN_ODD; 

---- TEST

BEGIN
FIND_EVEN_ODD(10);
END;

-- Q2 - FIND_EMPLOYEE

CREATE OR REPLACE PROCEDURE FIND_EMPLOYEE(P_EMPLOYEE_ID IN NUMBER) AS
V_COUNT NUMBER;
V_FIRST_NAME EMPLOYEES.FIRST_NAME%TYPE;
V_LAST_NAME EMPLOYEES.LAST_NAME%TYPE;
V_EMAIL EMPLOYEES.EMAIL%TYPE;
V_PHONE EMPLOYEES.PHONE%TYPE;
V_HIRE_DATE EMPLOYEES.HIRE_DATE%TYPE;
V_JOB_TITLE EMPLOYEES.JOB_TITLE%TYPE;
BEGIN

SELECT COUNT(EMPLOYEE_ID) INTO V_COUNT FROM EMPLOYEES WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;
IF V_COUNT = 0 THEN
DBMS_OUTPUT.PUT_LINE( ' The EMPLOYEE_ID is not present in EMPLOYEES ');
ELSE
SELECT FIRST_NAME, LAST_NAME, EMAIL, PHONE, HIRE_DATE, JOB_TITLE
   INTO   V_FIRST_NAME, V_LAST_NAME, V_EMAIL, V_PHONE, V_HIRE_DATE, V_JOB_TITLE
FROM EMPLOYEES WHERE EMPLOYEE_ID = P_EMPLOYEE_ID;
  
   DBMS_OUTPUT.PUT_LINE('FIRST_NAME : ' || V_FIRST_NAME);
   DBMS_OUTPUT.PUT_LINE('LAST_NAMENAME: ' || V_LAST_NAME);
   DBMS_OUTPUT.PUT_LINE('EMAIL: ' || V_EMAIL);
   DBMS_OUTPUT.PUT_LINE('PHONE: ' || V_PHONE);
   DBMS_OUTPUT.PUT_LINE('HIRE_DATE: ' || V_HIRE_DATE);
   DBMS_OUTPUT.PUT_LINE('JOB_TITLE: ' || V_JOB_TITLE);
END IF;

EXCEPTION
  
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('Employee not found.');
WHEN TOO_MANY_ROWS THEN
DBMS_OUTPUT.PUT_LINE('Employee has too many records .');
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('Stored PROCEDURE has errors. Please take a look');     
END FIND_EMPLOYEE;   

---- TEST

BEGIN
    FIND_EMPLOYEE(107);
    FIND_EMPLOYEE(106);
END;

-- Q3 - UPDATE PRICE BY CATEGORY

CREATE OR REPLACE PROCEDURE UPDATE_PRICE_BY_CATEGORY (CATEGROYID IN NUMBER,INCREASEPRICE IN NUMBER) AS
  CATEGORY_ID PRODUCTS.CATEGORY_ID%TYPE;
  LISTPRICE PRODUCTS.LIST_PRICE%TYPE;
  ROWS_UPDATED NUMBER; 
BEGIN   
  UPDATE PRODUCTS SET PRODUCTS.LIST_PRICE=PRODUCTS.LIST_PRICE+INCREASEPRICE
  WHERE CATEGORY_ID = CATEGROYID AND LIST_PRICE>0;
        ROWS_UPDATED := SQL%ROWCOUNT;
        
  DBMS_OUTPUT.PUT_LINE ('Rows_updated: ' || ROWS_UPDATED||' lines');
  
    EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Error trying to SELECT too many rows');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('An Error Occured!');
END UPDATE_PRICE_BY_CATEGORY;  

---- TEST

BEGIN
    UPDATE_PRICE_BY_CATEGORY (1,5);
END;

-- Q4. Write a stored procedure named update_price_under_avg. This procedure do not have any parameters.

CREATE OR REPLACE PROCEDURE UPDATE_PRICE_UNDER_AVERAGE AS
V_AVG PRODUCTS.LIST_PRICE%TYPE;
V_RATE NUMBER;
BEGIN

SELECT AVG(LIST_PRICE) INTO V_AVG FROM PRODUCTS ;

   IF V_AVG >= 1000 THEN
       V_RATE := 1.02;         
   ELSE
V_RATE :=1.01;
   END IF;
  
  
   UPDATE PRODUCTS SET LIST_PRICE = LIST_PRICE * V_RATE WHERE LIST_PRICE <= V_AVG;
   DBMS_OUTPUT.PUT_LINE('Rows Updated =' || SQL%ROWCOUNT);  


EXCEPTION
  
WHEN NO_DATA_FOUND THEN
DBMS_OUTPUT.PUT_LINE('PRODUCTS not found.');   
WHEN OTHERS THEN
DBMS_OUTPUT.PUT_LINE('ERROR!!');     
END UPDATE_PRICE_BY_CATEGORY;

---- TEST

BEGIN
   UPDATE_PRICE_UNDER_AVERAGE;
END;

-- Q5. Write a procedure named product_price_report to show the number of products in each price category

CREATE OR REPLACE PROCEDURE PORDUCT_PRICE_REPORT AS  
  LISTPRICE PRODUCTS.LIST_PRICE%TYPE;
  AVGPRICE PRODUCTS.LIST_PRICE%TYPE;
  MAXPRICE PRODUCTS.LIST_PRICE%TYPE;
  MINPRICE PRODUCTS.LIST_PRICE%TYPE;
  ROWS_COUNT NUMBER;
  
BEGIN
SELECT LIST_PRICE, AVG(LIST_PRICE), MAX(LIST_PRICE), MIN(LIST_PRICE),COUNT(PRODUCT_ID) 
    INTO LISTPRICE, AVGPRICE, MAXPRICE, MINPRICE, ROWS_COUNT
  FROM PRODUCTS GROUP BY LIST_PRICE;  
  
  IF(LISTPRICE<(AVGPRICE-MINPRICE)/2) THEN
    UPDATE PRODUCTS SET PRODUCTS.LIST_PRICE=PRODUCTS.LIST_PRICE;
    ROWS_COUNT := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE ('Cheap: ' || ROWS_COUNT);
  ELSIF (LISTPRICE<=(MAXPRICE-AVGPRICE)/2) AND (LISTPRICE>=(AVGPRICE-MINPRICE)/2) THEN
    UPDATE PRODUCTS SET PRODUCTS.LIST_PRICE=PRODUCTS.LIST_PRICE;
    ROWS_COUNT:= SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE ('Fair: ' || ROWS_COUNT);
  ELSE 
    UPDATE PRODUCTS SET PRODUCTS.LIST_PRICE=PRODUCTS.LIST_PRICE;
    ROWS_COUNT := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE ('Expensive: ' || ROWS_COUNT); 
  END IF;
  EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Error trying to SELECT too many rows');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No data found');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE('An Error Occured!');
END PORDUCT_PRICE_REPORT;  

---- TEST

BEGIN
    PORDUCT_PRICE_REPORT;    
END;

